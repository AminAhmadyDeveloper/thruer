import { createEnv } from "@t3-oss/env-nextjs";
import { z } from "zod/v4";

export const variables = createEnv({
  server: {
    PORT: z.string().min(4),
    ARCJET_KEY: z.string(),
    BETTER_AUTH_SECRET: z.string(),
    DATABASE_URL: z.url(),
    DATABASE_URL_UNPOOLED: z.url().optional(),
    NEON_PROJECT_ID: z.string().optional(),
    STACK_SECRET_SERVER_KEY: z.string().optional(),
    PGDATABASE: z.string().optional(),
    PGHOST: z.string().optional(),
    PGHOST_UNPOOLED: z.string().optional(),
    PGPASSWORD: z.string().optional(),
    PGUSER: z.string().optional(),
    POSTGRES_DATABASE: z.string().optional(),
    POSTGRES_HOST: z.string().optional(),
    POSTGRES_PASSWORD: z.string().optional(),
    POSTGRES_PRISMA_URL: z.url().optional(),
    POSTGRES_URL: z.url().optional(),
    POSTGRES_URL_NON_POOLING: z.url().optional(),
    POSTGRES_URL_NO_SSL: z.url().optional(),
    POSTGRES_USER: z.string().optional(),
    EXPERIMENTATION_CONFIG_ITEM_KEY: z.string().optional(),
    OPENROUTER_API_KEY: z.string(),
    GAP_GPT_API_KEY: z.string().optional(),
    LIARA_API_KEY: z.string().optional(),
    KV_REST_API_READ_ONLY_TOKEN: z.string().optional(),
    KV_REST_API_TOKEN: z.string().optional(),
    KV_REST_API_URL: z.url().optional(),
    KV_URL: z.url().optional(),
    REDIS_URL: z.url(),
    POLAR_ACCESS_TOKEN: z.string(),
    POLAR_SUCCESS_URL: z.url(),
    RESEND_API_KEY: z.string(),
    VERCEL_AUTOMATION_BYPASS_SECRET: z.string().optional(),
    VERCEL_OIDC_TOKEN: z.string().optional(),
  },
  client: {},
  runtimeEnv: {
    DATABASE_URL: process.env.DATABASE_URL,
    REDIS_URL: process.env.REDIS_URL,
    NEXT_PUBLIC_WEBSITE_MAIN_URL: process.env.NEXT_PUBLIC_WEBSITE_MAIN_URL,
    BETTER_AUTH_SECRET: process.env.BETTER_AUTH_SECRET,
    NEXT_PUBLIC_BETTER_AUTH_URL: process.env.NEXT_PUBLIC_BETTER_AUTH_URL,
    ARCJET_KEY: process.env.ARCJET_KEY,
    OPENROUTER_API_KEY: process.env.OPENROUTER_API_KEY,
    POLAR_ACCESS_TOKEN: process.env.POLAR_ACCESS_TOKEN,
    POLAR_SUCCESS_URL: process.env.POLAR_SUCCESS_URL,
    RESEND_API_KEY: process.env.RESEND_API_KEY,
    DATABASE_URL_UNPOOLED: process.env.DATABASE_URL_UNPOOLED,
    NEON_PROJECT_ID: process.env.NEON_PROJECT_ID,
    STACK_SECRET_SERVER_KEY: process.env.STACK_SECRET_SERVER_KEY,
    PGDATABASE: process.env.PGDATABASE,
    PGHOST: process.env.PGHOST,
    PGHOST_UNPOOLED: process.env.PGHOST_UNPOOLED,
    PGPASSWORD: process.env.PGPASSWORD,
    PGUSER: process.env.PGUSER,
    POSTGRES_DATABASE: process.env.POSTGRES_DATABASE,
    POSTGRES_HOST: process.env.POSTGRES_HOST,
    POSTGRES_PASSWORD: process.env.POSTGRES_PASSWORD,
    POSTGRES_PRISMA_URL: process.env.POSTGRES_PRISMA_URL,
    POSTGRES_URL: process.env.POSTGRES_URL,
    POSTGRES_URL_NON_POOLING: process.env.POSTGRES_URL_NON_POOLING,
    POSTGRES_URL_NO_SSL: process.env.POSTGRES_URL_NO_SSL,
    POSTGRES_USER: process.env.POSTGRES_USER,
    EXPERIMENTATION_CONFIG_ITEM_KEY:
      process.env.EXPERIMENTATION_CONFIG_ITEM_KEY,
    GAP_GPT_API_KEY: process.env.GAP_GPT_API_KEY,
    LIARA_API_KEY: process.env.LIARA_API_KEY,
    KV_REST_API_READ_ONLY_TOKEN: process.env.KV_REST_API_READ_ONLY_TOKEN,
    KV_REST_API_TOKEN: process.env.KV_REST_API_TOKEN,
    KV_REST_API_URL: process.env.KV_REST_API_URL,
    KV_URL: process.env.KV_URL,
    VERCEL_AUTOMATION_BYPASS_SECRET:
      process.env.VERCEL_AUTOMATION_BYPASS_SECRET,
    VERCEL_OIDC_TOKEN: process.env.VERCEL_OIDC_TOKEN,
    PORT: process.env.PORT,
    NEXT_PUBLIC_HYPERTUNE_TOKEN: process.env.NEXT_PUBLIC_HYPERTUNE_TOKEN,
    NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN,
    NEXT_PUBLIC_STACK_PROJECT_ID: process.env.NEXT_PUBLIC_STACK_PROJECT_ID,
    NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY:
      process.env.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY,
    NODE_ENV: process.env.NODE_ENV,
  },
  shared: {
    NODE_ENV: z
      .enum(["development", "production", "test"])
      .default("development"),
    NEXT_PUBLIC_WEBSITE_MAIN_URL: z.string().url(),
    NEXT_PUBLIC_BETTER_AUTH_URL: z.string().url(),
    NEXT_PUBLIC_STACK_PROJECT_ID: z.string().optional(),
    NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: z.string().optional(),
    NEXT_PUBLIC_HYPERTUNE_TOKEN: z.string(),
    NEXT_PUBLIC_SENTRY_DSN: z.string(),
  },
});
